#[derive(Clone, Copy, Default)]
pub enum Pattern {
  #[default]
  Single,
  Block,
  Beehive,
  Loaf,
  Boat,
  Tub,
  Blinker,
  Toad,
  Beacon,
  Pulsar,
  Pentadecathlon,
  Glider,
  LightweightSpaceship,
  MiddleweightSpaceship,
  HeavyweightSpaceship,
  RPentomino,
  Diehard,
  Acorn,
  GosperGliderGun,
  LongBoat,
  Eater,
}

impl Pattern {
  pub fn coords(self) -> Vec<(i64, i64)> {
    match self {
      Self::Single => vec![(0, 0)],
      Self::Block => vec![(0, 0), (1, 0), (0, 1), (1, 1)],
      Self::Beehive => vec![(1, 0), (2, 0), (0, 1), (3, 1), (1, 2), (2, 2)],
      Self::Loaf => vec![(1, 0), (2, 0), (0, 1), (3, 1), (1, 2), (3, 2), (2, 3)],
      Self::Boat => vec![(0, 0), (1, 0), (0, 1), (2, 1), (1, 2)],
      Self::Tub => vec![(1, 0), (0, 1), (2, 1), (1, 2)],
      Self::Blinker => vec![(0, 0), (1, 0), (2, 0)],
      Self::Toad => vec![(1, 0), (2, 0), (3, 0), (0, 1), (1, 1), (2, 1)],
      Self::Beacon => vec![(0, 0), (1, 0), (0, 1), (3, 2), (2, 3), (3, 3)],
      Self::Pulsar => vec![
        (2, 0),
        (3, 0),
        (4, 0),
        (8, 0),
        (9, 0),
        (10, 0),
        (0, 2),
        (5, 2),
        (7, 2),
        (12, 2),
        (0, 3),
        (5, 3),
        (7, 3),
        (12, 3),
        (0, 4),
        (5, 4),
        (7, 4),
        (12, 4),
        (2, 5),
        (3, 5),
        (4, 5),
        (8, 5),
        (9, 5),
        (10, 5),
        (2, 7),
        (3, 7),
        (4, 7),
        (8, 7),
        (9, 7),
        (10, 7),
        (0, 8),
        (5, 8),
        (7, 8),
        (12, 8),
        (0, 9),
        (5, 9),
        (7, 9),
        (12, 9),
        (0, 10),
        (5, 10),
        (7, 10),
        (12, 10),
        (2, 12),
        (3, 12),
        (4, 12),
        (8, 12),
        (9, 12),
        (10, 12),
      ],
      Self::Pentadecathlon => vec![
        (1, 0),
        (0, 1),
        (2, 1),
        (1, 2),
        (1, 3),
        (1, 4),
        (1, 5),
        (0, 6),
        (2, 6),
        (1, 7),
      ],
      Self::Glider => vec![(1, 0), (2, 1), (0, 2), (1, 2), (2, 2)],
      Self::LightweightSpaceship => vec![
        (1, 0),
        (4, 0),
        (0, 1),
        (0, 2),
        (4, 2),
        (0, 3),
        (1, 3),
        (2, 3),
        (3, 3),
      ],
      Self::MiddleweightSpaceship => vec![
        (2, 0),
        (1, 1),
        (5, 1),
        (0, 2),
        (0, 3),
        (5, 3),
        (0, 4),
        (1, 4),
        (2, 4),
        (3, 4),
        (4, 4),
      ],
      Self::HeavyweightSpaceship => vec![
        (2, 0),
        (3, 0),
        (1, 1),
        (6, 1),
        (0, 2),
        (0, 3),
        (6, 3),
        (0, 4),
        (1, 4),
        (2, 4),
        (3, 4),
        (4, 4),
        (5, 4),
      ],
      Self::RPentomino => vec![(1, 0), (2, 0), (0, 1), (1, 1), (1, 2)],
      Self::Diehard => vec![(6, 0), (0, 1), (1, 1), (1, 2), (5, 2), (6, 2), (7, 2)],
      Self::Acorn => vec![(1, 0), (3, 1), (0, 2), (1, 2), (4, 2), (5, 2), (6, 2)],
      Self::GosperGliderGun => vec![
        (24, 0),
        (22, 1),
        (24, 1),
        (12, 2),
        (13, 2),
        (36, 2),
        (37, 2),
        (11, 3),
        (15, 3),
        (36, 3),
        (37, 3),
        (0, 4),
        (1, 4),
        (10, 4),
        (16, 4),
        (17, 4),
        (22, 4),
        (24, 4),
        (0, 5),
        (1, 5),
        (10, 5),
        (14, 5),
        (16, 5),
        (17, 5),
        (22, 5),
        (24, 5),
        (10, 6),
        (16, 6),
        (17, 6),
        (11, 7),
        (15, 7),
        (12, 8),
        (13, 8),
      ],
      Self::LongBoat => vec![
        (1, 0),
        (2, 0),
        (0, 1),
        (3, 1),
        (1, 2),
        (3, 2),
        (2, 3),
        (3, 3),
      ],
      Self::Eater => vec![(0, 0), (1, 0), (0, 1), (2, 2), (3, 2), (2, 3), (3, 3)],
    }
  }

  pub fn next(&mut self) {
    *self = match *self {
      Self::Single => Self::Block,
      Self::Block => Self::Beehive,
      Self::Beehive => Self::Loaf,
      Self::Loaf => Self::Boat,
      Self::Boat => Self::Tub,
      Self::Tub => Self::Blinker,
      Self::Blinker => Self::Toad,
      Self::Toad => Self::Beacon,
      Self::Beacon => Self::Pulsar,
      Self::Pulsar => Self::Pentadecathlon,
      Self::Pentadecathlon => Self::Glider,
      Self::Glider => Self::LightweightSpaceship,
      Self::LightweightSpaceship => Self::MiddleweightSpaceship,
      Self::MiddleweightSpaceship => Self::HeavyweightSpaceship,
      Self::HeavyweightSpaceship => Self::RPentomino,
      Self::RPentomino => Self::Diehard,
      Self::Diehard => Self::Acorn,
      Self::Acorn => Self::GosperGliderGun,
      Self::GosperGliderGun => Self::LongBoat,
      Self::LongBoat => Self::Eater,
      Self::Eater => Self::Single,
    }
  }

  pub fn prev(&mut self) {
    *self = match *self {
      Self::Single => Self::Eater,
      Self::Block => Self::Single,
      Self::Beehive => Self::Block,
      Self::Loaf => Self::Beehive,
      Self::Boat => Self::Loaf,
      Self::Tub => Self::Boat,
      Self::Blinker => Self::Tub,
      Self::Toad => Self::Blinker,
      Self::Beacon => Self::Toad,
      Self::Pulsar => Self::Beacon,
      Self::Pentadecathlon => Self::Pulsar,
      Self::Glider => Self::Pentadecathlon,
      Self::LightweightSpaceship => Self::Glider,
      Self::MiddleweightSpaceship => Self::LightweightSpaceship,
      Self::HeavyweightSpaceship => Self::MiddleweightSpaceship,
      Self::RPentomino => Self::HeavyweightSpaceship,
      Self::Diehard => Self::RPentomino,
      Self::Acorn => Self::Diehard,
      Self::GosperGliderGun => Self::Acorn,
      Self::LongBoat => Self::GosperGliderGun,
      Self::Eater => Self::LongBoat,
    }
  }

  pub fn name(self) -> &'static str {
    match self {
      Self::Single => "Single Cell Placement",
      Self::Block => "Block (Still Life)",
      Self::Beehive => "Beehive (Still Life)",
      Self::Loaf => "Loaf (Still Life)",
      Self::Boat => "Boat (Still Life)",
      Self::Tub => "Tub (Still Life)",
      Self::Blinker => "Blinker (Period 2)",
      Self::Toad => "Toad (Period 2)",
      Self::Beacon => "Beacon (Period 2)",
      Self::Pulsar => "Pulsar (Period 3)",
      Self::Pentadecathlon => "Pentadecathlon (Period 15)",
      Self::Glider => "Glider (Spaceship)",
      Self::LightweightSpaceship => "LWSS (Spaceship)",
      Self::MiddleweightSpaceship => "MWSS (Spaceship)",
      Self::HeavyweightSpaceship => "HWSS (Spaceship)",
      Self::RPentomino => "R-Pentomino (Methuselah)",
      Self::Diehard => "Diehard (Methuselah, dies at 130)",
      Self::Acorn => "Acorn (Methuselah, stabilizes at 5206)",
      Self::GosperGliderGun => "Gosper Glider Gun (Period 30)",
      Self::LongBoat => "Long Boat (Still Life)",
      Self::Eater => "Eater (Still Life)",
    }
  }
}
